{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useInput = validateInput => {\n  _s();\n\n  const [touched, setTouched] = useState(false);\n  const [enteredValue, setEnteredValue] = useState('');\n  const validate = validateInput(enteredValue);\n  const hasError = !validate && touched;\n\n  const onBlurHandler = () => {\n    setTouched(true);\n  };\n\n  const onChangeHandler = e => {\n    setEnteredValue(e.target.value);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n  };\n\n  return {\n    hasError,\n    onBlurHandler,\n    onChangeHandler,\n    reset,\n    value: enteredValue\n  };\n};\n\n_s(useInput, \"Yhd2osacv17DdxcDByY9rXRMUfg=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/smithdc/Desktop/restaurant-webpage/src/hooks/use-input.js"],"names":["useState","useInput","validateInput","touched","setTouched","enteredValue","setEnteredValue","validate","hasError","onBlurHandler","onChangeHandler","e","target","value","reset"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMO,QAAQ,GAAGL,aAAa,CAACG,YAAD,CAA9B;AAEA,QAAMG,QAAQ,GAAG,CAACD,QAAD,IAAaJ,OAA9B;;AAEA,QAAMM,aAAa,GAAG,MAAM;AACxBL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH,GAFD;;AAIA,QAAMM,eAAe,GAAGC,CAAC,IAAI;AACzBL,IAAAA,eAAe,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACH,GAFD;;AAIA,QAAMC,KAAK,GAAG,MAAM;AAChBR,IAAAA,eAAe,CAAC,EAAD,CAAf;AACH,GAFD;;AAIA,SAAO;AACHE,IAAAA,QADG;AAEHC,IAAAA,aAFG;AAGHC,IAAAA,eAHG;AAIHI,IAAAA,KAJG;AAKHD,IAAAA,KAAK,EAAER;AALJ,GAAP;AAOH,CA3BD;;GAAMJ,Q;;AA6BN,eAAeA,QAAf","sourcesContent":["import { useState } from 'react';\n\nconst useInput = (validateInput) => {\n    const [touched, setTouched] = useState(false);\n    const [enteredValue, setEnteredValue] = useState('');\n\n    const validate = validateInput(enteredValue);\n\n    const hasError = !validate && touched;\n\n    const onBlurHandler = () => {\n        setTouched(true);\n    };\n\n    const onChangeHandler = e => {\n        setEnteredValue(e.target.value);\n    };\n\n    const reset = () => {\n        setEnteredValue('')\n    };\n\n    return {\n        hasError,\n        onBlurHandler,\n        onChangeHandler,\n        reset,\n        value: enteredValue\n    }\n}\n\nexport default useInput;"]},"metadata":{},"sourceType":"module"}