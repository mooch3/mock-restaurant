{"ast":null,"code":"var _jsxFileName = \"/Users/smithdc/Desktop/restaurant-webpage/src/components/Cart/OrderForm/OrderForm.js\",\n    _s = $RefreshSig$();\n\nimport classes from './OrderForm.module.css';\nimport useInput from '../../../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OrderForm = props => {\n  _s();\n\n  const {\n    hasError: fNameHasError,\n    onBlurHandler: fNameBlurHandler,\n    onChangeHandler: fNameOnChangedHandler,\n    value: fName,\n    reset: resetFName,\n    isValid: fNameIsValid\n  } = useInput(value => value.trim() !== '');\n  const {\n    hasError: lNameHasError,\n    onBlurHandler: lNameBlurHandler,\n    onChangeHandler: lNameOnChangedHandler,\n    value: lName,\n    reset: resetLName,\n    isValid: lNameIsValid\n  } = useInput(value => value.trim() !== '');\n  const {\n    hasError: addressHasError,\n    onBlurHandler: addressBlurHandler,\n    onChangeHandler: addressOnChangedHandler,\n    value: address,\n    reset: resetAddress,\n    isValid: addressIsValid\n  } = useInput(value => value.trim() !== '');\n  const {\n    hasError: emailHasError,\n    onBlurHandler: emailBlurHandler,\n    onChangeHandler: emailOnChangedHandler,\n    value: email,\n    reset: resetEmail,\n    isValid: emailIsValid\n  } = useInput(value => value.includes('@'));\n  let formIsValid = false;\n\n  if (emailIsValid && fNameIsValid && lNameIsValid && addressIsValid) {\n    formIsValid = true;\n  }\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (!forIsValid) {\n      return;\n    }\n\n    console.log(fName, lName, email, address);\n    const order = {\n      firstName: fName,\n      lastName: lName,\n      email: email,\n      address: address,\n      order: props.order\n    };\n    fetch('https://react-http-de322-default-rtdb.firebaseio.com/orders.json', {\n      method: 'POST',\n      body: JSON.stringify(order),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    resetFName();\n    resetLName();\n    resetAddress();\n    resetEmail();\n  };\n\n  const fNameClasses = fNameHasError ? classes['form-control'] + ' ' + classes.invalid : classes['form-control'];\n  const lNameClasses = lNameHasError ? classes['form-control'] + ' ' + classes.invalid : classes['form-control'];\n  const addressClasses = addressHasError ? classes['form-control'] + ' ' + classes.invalid : classes['form-control'];\n  const emailClasses = emailHasError ? classes['form-control'] + ' ' + classes.invalid : classes['form-control'];\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    className: classes.form,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Order Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: fNameClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"firstName\",\n        children: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        onBlur: fNameBlurHandler,\n        onChange: fNameOnChangedHandler,\n        id: \"firstName\",\n        value: fName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), fNameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter your first name.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: lNameClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lastName\",\n        children: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        onBlur: lNameBlurHandler,\n        onChange: lNameOnChangedHandler,\n        id: \"lastName\",\n        value: lName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), lNameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter your last name.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: addressClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"address\",\n        children: \"Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        onBlur: addressBlurHandler,\n        onChange: addressOnChangedHandler,\n        id: \"address\",\n        value: address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), addressHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter your address.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        autoComplete: \"off\",\n        onBlur: emailBlurHandler,\n        onChange: emailOnChangedHandler,\n        id: \"email\",\n        value: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), emailHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: props.classes,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: props.btncCnlClasses,\n        onClick: props.onClosed,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), props.hasItems && /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        className: formIsValid ? props.btnClasses : undefined,\n        children: \"Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(OrderForm, \"TbUgB/muERPJFUbZpOpsTCtrA4Y=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = OrderForm;\nexport default OrderForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderForm\");","map":{"version":3,"sources":["/Users/smithdc/Desktop/restaurant-webpage/src/components/Cart/OrderForm/OrderForm.js"],"names":["classes","useInput","OrderForm","props","hasError","fNameHasError","onBlurHandler","fNameBlurHandler","onChangeHandler","fNameOnChangedHandler","value","fName","reset","resetFName","isValid","fNameIsValid","trim","lNameHasError","lNameBlurHandler","lNameOnChangedHandler","lName","resetLName","lNameIsValid","addressHasError","addressBlurHandler","addressOnChangedHandler","address","resetAddress","addressIsValid","emailHasError","emailBlurHandler","emailOnChangedHandler","email","resetEmail","emailIsValid","includes","formIsValid","submitHandler","event","preventDefault","forIsValid","console","log","order","firstName","lastName","fetch","method","body","JSON","stringify","headers","fNameClasses","invalid","lNameClasses","addressClasses","emailClasses","form","btncCnlClasses","onClosed","hasItems","btnClasses","undefined"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,wBAApB;AACA,OAAOC,QAAP,MAAqB,0BAArB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAEzB,QAAM;AACFC,IAAAA,QAAQ,EAAEC,aADR;AAEFC,IAAAA,aAAa,EAAEC,gBAFb;AAGFC,IAAAA,eAAe,EAAEC,qBAHf;AAIFC,IAAAA,KAAK,EAAEC,KAJL;AAKFC,IAAAA,KAAK,EAAEC,UALL;AAMFC,IAAAA,OAAO,EAAEC;AANP,MAQFd,QAAQ,CAACS,KAAK,IAAIA,KAAK,CAACM,IAAN,OAAiB,EAA3B,CARZ;AAUA,QAAM;AACFZ,IAAAA,QAAQ,EAAEa,aADR;AAEFX,IAAAA,aAAa,EAAEY,gBAFb;AAGFV,IAAAA,eAAe,EAAEW,qBAHf;AAIFT,IAAAA,KAAK,EAAEU,KAJL;AAKFR,IAAAA,KAAK,EAAES,UALL;AAMFP,IAAAA,OAAO,EAAEQ;AANP,MAQFrB,QAAQ,CAACS,KAAK,IAAIA,KAAK,CAACM,IAAN,OAAiB,EAA3B,CARZ;AAUA,QAAM;AACFZ,IAAAA,QAAQ,EAAEmB,eADR;AAEFjB,IAAAA,aAAa,EAAEkB,kBAFb;AAGFhB,IAAAA,eAAe,EAAEiB,uBAHf;AAIFf,IAAAA,KAAK,EAAEgB,OAJL;AAKFd,IAAAA,KAAK,EAAEe,YALL;AAMFb,IAAAA,OAAO,EAAEc;AANP,MAQF3B,QAAQ,CAACS,KAAK,IAAIA,KAAK,CAACM,IAAN,OAAiB,EAA3B,CARZ;AAUA,QAAM;AACFZ,IAAAA,QAAQ,EAAEyB,aADR;AAEFvB,IAAAA,aAAa,EAAEwB,gBAFb;AAGFtB,IAAAA,eAAe,EAAEuB,qBAHf;AAIFrB,IAAAA,KAAK,EAAEsB,KAJL;AAKFpB,IAAAA,KAAK,EAAEqB,UALL;AAMFnB,IAAAA,OAAO,EAAEoB;AANP,MAQFjC,QAAQ,CAACS,KAAK,IAAIA,KAAK,CAACyB,QAAN,CAAe,GAAf,CAAV,CARZ;AAUA,MAAIC,WAAW,GAAG,KAAlB;;AAEA,MAAIF,YAAY,IAAInB,YAAhB,IAAgCO,YAAhC,IAAgDM,cAApD,EAAoE;AAChEQ,IAAAA,WAAW,GAAG,IAAd;AACH;;AAED,QAAMC,aAAa,GAAGC,KAAK,IAAI;AAC3BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACC,UAAL,EAAiB;AACb;AACH;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAY/B,KAAZ,EAAmBS,KAAnB,EAA0BY,KAA1B,EAAiCN,OAAjC;AAEA,UAAMiB,KAAK,GAAG;AACVC,MAAAA,SAAS,EAAEjC,KADD;AAEVkC,MAAAA,QAAQ,EAAEzB,KAFA;AAGVY,MAAAA,KAAK,EAAEA,KAHG;AAIVN,MAAAA,OAAO,EAAEA,OAJC;AAKViB,MAAAA,KAAK,EAAExC,KAAK,CAACwC;AALH,KAAd;AAUAG,IAAAA,KAAK,CAAC,kEAAD,EAAqE;AACtEC,MAAAA,MAAM,EAAE,MAD8D;AAEtEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,KAAf,CAFgE;AAGtEQ,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAH6D,KAArE,CAAL;AASAtC,IAAAA,UAAU;AACVQ,IAAAA,UAAU;AACVM,IAAAA,YAAY;AACZM,IAAAA,UAAU;AAEb,GAjCD;;AAqCA,QAAMmB,YAAY,GAAG/C,aAAa,GAAGL,OAAO,CAAC,cAAD,CAAP,GAA0B,GAA1B,GAAgCA,OAAO,CAACqD,OAA3C,GAAqDrD,OAAO,CAAC,cAAD,CAA9F;AACA,QAAMsD,YAAY,GAAGrC,aAAa,GAAGjB,OAAO,CAAC,cAAD,CAAP,GAA0B,GAA1B,GAAgCA,OAAO,CAACqD,OAA3C,GAAqDrD,OAAO,CAAC,cAAD,CAA9F;AACA,QAAMuD,cAAc,GAAGhC,eAAe,GAAGvB,OAAO,CAAC,cAAD,CAAP,GAA0B,GAA1B,GAAgCA,OAAO,CAACqD,OAA3C,GAAqDrD,OAAO,CAAC,cAAD,CAAlG;AACA,QAAMwD,YAAY,GAAG3B,aAAa,GAAG7B,OAAO,CAAC,cAAD,CAAP,GAA0B,GAA1B,GAAgCA,OAAO,CAACqD,OAA3C,GAAqDrD,OAAO,CAAC,cAAD,CAA9F;AAEA,sBACI;AAAM,IAAA,QAAQ,EAAEqC,aAAhB;AAA+B,IAAA,SAAS,EAAErC,OAAO,CAACyD,IAAlD;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEI;AAAK,MAAA,SAAS,EAAEL,YAAhB;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,YAAY,EAAC,KAFjB;AAGI,QAAA,MAAM,EAAE7C,gBAHZ;AAII,QAAA,QAAQ,EAAEE,qBAJd;AAKI,QAAA,EAAE,EAAC,WALP;AAMI,QAAA,KAAK,EAAEE;AANX;AAAA;AAAA;AAAA;AAAA,cAFJ,EAUKN,aAAa,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVtB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAcI;AAAK,MAAA,SAAS,EAAEiD,YAAhB;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,YAAY,EAAC,KAFjB;AAGI,QAAA,MAAM,EAAEpC,gBAHZ;AAII,QAAA,QAAQ,EAAEC,qBAJd;AAKI,QAAA,EAAE,EAAC,UALP;AAMI,QAAA,KAAK,EAAEC;AANX;AAAA;AAAA;AAAA;AAAA,cAFJ,EAUKH,aAAa,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVtB;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ,eA0BI;AAAK,MAAA,SAAS,EAAEsC,cAAhB;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,YAAY,EAAC,KAFjB;AAGI,QAAA,MAAM,EAAE/B,kBAHZ;AAII,QAAA,QAAQ,EAAEC,uBAJd;AAKI,QAAA,EAAE,EAAC,SALP;AAMI,QAAA,KAAK,EAAEC;AANX;AAAA;AAAA;AAAA;AAAA,cAFJ,EAUKH,eAAe,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVxB;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BJ,eAsCI;AAAK,MAAA,SAAS,EAAEiC,YAAhB;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,YAAY,EAAC,KAFjB;AAGI,QAAA,MAAM,EAAE1B,gBAHZ;AAII,QAAA,QAAQ,EAAEC,qBAJd;AAKI,QAAA,EAAE,EAAC,OALP;AAMI,QAAA,KAAK,EAAEC;AANX;AAAA;AAAA;AAAA;AAAA,cAFJ,EAUKH,aAAa,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVtB;AAAA;AAAA;AAAA;AAAA;AAAA,YAtCJ,eAkDI;AAAK,MAAA,SAAS,EAAE1B,KAAK,CAACH,OAAtB;AAAA,8BACI;AAAQ,QAAA,SAAS,EAAEG,KAAK,CAACuD,cAAzB;AAAyC,QAAA,OAAO,EAAEvD,KAAK,CAACwD,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKxD,KAAK,CAACyD,QAAN,iBAAkB;AAAQ,QAAA,QAAQ,EAAE,CAACxB,WAAnB;AAAgC,QAAA,SAAS,EAAEA,WAAW,GAAGjC,KAAK,CAAC0D,UAAT,GAAsBC,SAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFvB;AAAA;AAAA;AAAA;AAAA;AAAA,YAlDJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyDH,CAnJD;;GAAM5D,S;UAUED,Q,EAUAA,Q,EAUAA,Q,EAUAA,Q;;;KAxCFC,S;AAqJN,eAAeA,SAAf","sourcesContent":["import classes from './OrderForm.module.css';\nimport useInput from '../../../hooks/use-input';\n\nconst OrderForm = (props) => {\n\n    const {\n        hasError: fNameHasError,\n        onBlurHandler: fNameBlurHandler,\n        onChangeHandler: fNameOnChangedHandler,\n        value: fName,\n        reset: resetFName,\n        isValid: fNameIsValid\n\n    } = useInput(value => value.trim() !== '');\n\n    const {\n        hasError: lNameHasError,\n        onBlurHandler: lNameBlurHandler,\n        onChangeHandler: lNameOnChangedHandler,\n        value: lName,\n        reset: resetLName,\n        isValid: lNameIsValid\n\n    } = useInput(value => value.trim() !== '');\n\n    const {\n        hasError: addressHasError,\n        onBlurHandler: addressBlurHandler,\n        onChangeHandler: addressOnChangedHandler,\n        value: address,\n        reset: resetAddress,\n        isValid: addressIsValid\n\n    } = useInput(value => value.trim() !== '');\n\n    const {\n        hasError: emailHasError,\n        onBlurHandler: emailBlurHandler,\n        onChangeHandler: emailOnChangedHandler,\n        value: email,\n        reset: resetEmail,\n        isValid: emailIsValid\n\n    } = useInput(value => value.includes('@'));\n\n    let formIsValid = false;\n    \n    if (emailIsValid && fNameIsValid && lNameIsValid && addressIsValid) {\n        formIsValid = true;\n    }\n\n    const submitHandler = event => {\n        event.preventDefault();\n\n        if (!forIsValid) {\n            return;\n        }\n        \n        console.log(fName, lName, email, address);\n\n        const order = {\n            firstName: fName,\n            lastName: lName,\n            email: email,\n            address: address,\n            order: props.order\n        }\n\n\n\n        fetch('https://react-http-de322-default-rtdb.firebaseio.com/orders.json', {\n            method: 'POST',\n            body: JSON.stringify(order),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n\n        });\n\n        resetFName();\n        resetLName();\n        resetAddress();\n        resetEmail();\n\n    };\n\n\n\n    const fNameClasses = fNameHasError ? classes['form-control'] + ' ' + classes.invalid : classes['form-control'];\n    const lNameClasses = lNameHasError ? classes['form-control'] + ' ' + classes.invalid : classes['form-control'];\n    const addressClasses = addressHasError ? classes['form-control'] + ' ' + classes.invalid : classes['form-control'];\n    const emailClasses = emailHasError ? classes['form-control'] + ' ' + classes.invalid : classes['form-control'];\n\n    return (\n        <form onSubmit={submitHandler} className={classes.form}>\n        <h1>Order Details</h1>\n            <div className={fNameClasses}>\n                <label htmlFor=\"firstName\">First Name</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    onBlur={fNameBlurHandler}\n                    onChange={fNameOnChangedHandler}\n                    id=\"firstName\"\n                    value={fName}\n                />\n                {fNameHasError && <p>Please enter your first name.</p>}\n            </div>\n            <div className={lNameClasses}>\n                <label htmlFor=\"lastName\">Last Name</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    onBlur={lNameBlurHandler}\n                    onChange={lNameOnChangedHandler}\n                    id=\"lastName\"\n                    value={lName}\n                />\n                {lNameHasError && <p>Please enter your last name.</p>}\n            </div>\n            <div className={addressClasses}>\n                <label htmlFor=\"address\">Address</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    onBlur={addressBlurHandler}\n                    onChange={addressOnChangedHandler}\n                    id=\"address\"\n                    value={address}\n                />\n                {addressHasError && <p>Please enter your address.</p>}\n            </div>\n            <div className={emailClasses}>\n                <label htmlFor=\"email\">Email</label>\n                <input\n                    type=\"email\"\n                    autoComplete=\"off\"\n                    onBlur={emailBlurHandler}\n                    onChange={emailOnChangedHandler}\n                    id=\"email\"\n                    value={email}\n                />\n                {emailHasError && <p>Please enter a valid email.</p>}\n            </div>\n            <div className={props.classes}>\n                <button className={props.btncCnlClasses} onClick={props.onClosed}>Close</button>\n                {props.hasItems && <button disabled={!formIsValid} className={formIsValid ? props.btnClasses : undefined}>Order</button>}\n            </div>\n        </form>\n    )\n}\n\nexport default OrderForm;"]},"metadata":{},"sourceType":"module"}